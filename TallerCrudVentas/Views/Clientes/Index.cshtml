@model IEnumerable<TallerCrudVentas.Models.Cliente>

@{
    ViewData["Title"] = "CLIENTES";
}

<!-- Sección de estilos -->
<style>
    h1 {
        text-align: center;
    }

    th, td {
        padding: 8px;
        text-align: center;
    }

    .btnCrear {
        text-align: center;
    }

    tbody tr:nth-child(odd) td {
        background-color: #f2f2f2;
    }

    tbody tr:nth-child(even) td {
        background-color: #d9d9d9;
    }

    button {
        transition: all 300ms ease;
    }

    button:hover {
        cursor: pointer;
        transform: scale(1.05);
    }

    label {
        transition: all 300ms ease;
    }

    label:hover {
        cursor: pointer;
        transform: scale(1.05);
    }

    .botones {
        background-color: #343a40;
        color: white;
        border: none;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
    }

    th {
        text-align: center !important;
    }

    th, td {
        text-align: center !important;
    }
</style>

<!-- Titulo -->
<h1 style="margin-top: 50px;">CLIENTES APPLE INC</h1>

<!-- Botón para crear un nuevo cliente -->
<p style="margin-top: 20px; margin-bottom: 40px;" class="btnCrear">
    <button type="button" class="btn btn-dark">
        <a asp-action="Create" style="color: white; text-decoration: none;">Añadir nuevo cliente</a>
    </button>
</p>

<!-- Tabla de clientes -->
<table class="table" id="example">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Nombre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Direccion)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Telefono)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Documento)
            </th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Nombre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Direccion)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Telefono)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Documento)
            </td>
            <td>
                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                    <label class="btn btn-secondary active">
                        <a asp-action="Edit" asp-route-id="@item.ClienteId" style="color: white; text-decoration: none;">Editar</a>
                    </label>
                    <label class="btn btn-secondary">
                        <a asp-action="Details" asp-route-id="@item.ClienteId" style="color: white; text-decoration: none;">Detalles</a>
                    </label>
                    <label class="btn btn-danger">
                        <a onclick="confirmDelete('@item.ClienteId')" style="color: white; text-decoration: none;">Eliminar</a>
                    </label>
                </div>
            </td>
        </tr>
}
    </tbody>
</table>

<!-- Formulario oculto para el token de verificación -->
<form id="deleteForm" method="post" style="display:none;">  
    @Html.AntiForgeryToken()
</form>

<!-- Sección de scripts -->
<script>

    // Función para confirmar la eliminación de un producto
    function confirmDelete(id) {
        Swal.fire({
            title: '¿Estás seguro de que deseas eliminar este cliente?',
            text: "¡No podrás revertir esto!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: '¡Sí, elimínalo!'
        }).then((result) => {
            if (result.isConfirmed) {
                var form = document.createElement('form')
                form.method = 'post'
                form.action = '/Clientes/DeleteConfirmed'

                var input = document.createElement('input')
                input.setAttribute('name', 'id')
                input.setAttribute('value', id)
                input.type = 'hidden'
                form.appendChild(input)

                var token = document.querySelector('#deleteForm input[name="__RequestVerificationToken"]').cloneNode(true);
                form.appendChild(token)

                document.body.appendChild(form)
                form.submit();
            }
        })
    }

    // Mostrar mensaje de error si existe
    @if (TempData["Error"] != null)
    {
        <text>
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: '@TempData["Error"]'
        });
        </text>
    }

    new DataTable('#example', {
        dom: '',

        // Modificar el idioma de la tabla
        language: {
            search: "Buscar:",
            lengthMenu: "Mostrar _MENU_ entradas",
            info: "Mostrando _START_ a _END_ de _TOTAL_ entradas",
            infoEmpty: "Mostrando 0 a 0 de 0 entradas",
            infoFiltered: "(filtrado de _MAX_ entradas totales)",
            paginate: {
                next: ">",
                previous: "<"
            },
            zeroRecords: "No se encontraron registros coincidentes"
        },
        layout: {
            topStart: {
                buttons: [
                    {
                        extend: 'copy',
                        text: '<i class="fa-solid fa-copy"></i>',
                        className: 'botonCopiar btn',
                        exportOptions: {
                            columns: [0, 1, 2, 3] // Excluye la última columna
                        }
                    },
                    {
                        extend: 'csv',
                        text: '<i class="fa-solid fa-file-csv"></i>',
                        className: 'botonCsv btn',
                        exportOptions: {
                            columns: [0, 1, 2, 3] // Excluye la última columna
                        }
                    },
                    {
                        extend: 'excel',
                        text: '<i class="fa-regular fa-file-excel"></i>',
                        className: 'botonExcel btn',
                        exportOptions: {
                            columns: [0, 1, 2, 3] // Excluye la última columna
                        }
                    },
                    {
                        extend: 'pdf',
                        text: '<i class="fa-solid fa-file-pdf"></i>',
                        className: 'botonPdf btn',
                        exportOptions: {
                            columns: [0, 1, 2, 3] // Excluye la última columna
                        },

                        customize: function (doc) {
                            doc.content[1].table.widths = ['*', '*', '*', '*'];
                            doc.content[1].table.body.forEach(function (row) {
                                row.forEach(function (cell) {
                                    cell.alignment = 'center';
                                });
                            });
                        }
                    },
                    {
                        extend: 'print',
                        text: '<i class="fa-solid fa-print"></i>',
                        className: 'botonPrint btn',
                        exportOptions: {
                            columns: [0, 1, 2, 3] // Excluye la última columna
                        },
                        customize: function (win) {
                            $(win.document.body).find('table').addClass('display').css('text-align', 'center');
                            $(win.document.body).find('table th, table td').css('text-align', 'center');
                        }
                    },
                    {
                        extend: 'colvis',
                        text: 'Filtrar ',
                        className: 'botonColvis btn',
                        exportOptions: {
                            columns: [0, 1, 2, 3] // Excluye la última columna
                        }
                    }
                ]
            }
        },
        scrollX: true,
        initComplete: function(json, settings) {
            // Eliminar clase por defecto y añadir clase personalizada
            $(".dt-buttons").removeClass("dt-buttons");
            $(".dt-button").addClass("botones");
        }
    });
</script>
